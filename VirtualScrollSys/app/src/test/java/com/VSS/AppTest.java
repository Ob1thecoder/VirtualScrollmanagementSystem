/*
 * This source file was generated by the Gradle 'init' task
 */
package com.VSS;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import com.VSS.App;
import static org.mockito.Mockito.*;
import org.springframework.boot.SpringApplication;

class AppTest {

    @Test 
    void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @Test
    void testMainMethod() {
        // Mock SpringApplication to verify that it is called during the main method
        SpringApplication mockSpringApplication = mock(SpringApplication.class);

        // Replace the main method's execution of SpringApplication with the mock
        try {
            App.main(new String[] {});
            // If no exception is thrown, we assume the method executed successfully
        } catch (Exception e) {
            e.printStackTrace();
            // Failing the test if an exception occurs
            fail("The main method threw an exception: " + e.getMessage());  // <-- Fixed fail method
        }
    }

    @Test
    void testMainMethodPrintsGreeting() {
        // Redirect System.out to capture the printed greeting message
        java.io.ByteArrayOutputStream outContent = new java.io.ByteArrayOutputStream();
        System.setOut(new java.io.PrintStream(outContent));

        // Run the main method
        App.main(new String[] {});

        // Assert that the expected greeting is printed
        assertNotNull(outContent.toString().contains("Hello World!"), "Main method should print 'Hello World!'");

        // Reset System.out
        System.setOut(System.out);
    }
}

